pipeline {
    agent any

    // Define parameters for selecting the cloud provider
    parameters {
        choice(
            name: 'CLOUD_PROVIDER',
            choices: ['AWS', 'Azure', 'DigitalOcean'],
            description: 'Select the cloud provider on which to create a machine'
        )
    }

    environment {
        // Provide the paths for the Terraform configurations
        AWS_CONFIG_PATH = "/var/lib/jenkins/workspace/Create-VM/Terraform/AWS"
        AZURE_CONFIG_PATH = "/var/lib/jenkins/workspace/Create-VM/Terraform/Azure"
        DO_CONFIG_PATH = "/var/lib/jenkins/workspace/Create-VM/Terraform/Digitalocean"
    }

    stages {
        // stage('Checkout') {
        //     steps {
        //         // Clone your repository that contains the Terraform scripts
        //         git branch: 'deployment-strat', url: 'https://github.com/dheerajssh/edit-project.git'
        //     }
        // }

        stage('Initialize') {
            steps {
                echo "Selected Cloud Provider: ${params.CLOUD_PROVIDER}"
            }
        }

        stage('Terraform Init and Plan for AWS') {
            when {
                expression { params.CLOUD_PROVIDER == 'AWS' }
            }
            steps {
                dir("${AWS_CONFIG_PATH}") {
                    sh 'sudo terraform init'
                    sh 'sudo terraform plan -var-file="secret.tfvars" -out="aws-plan.tfplan"'
                }
            }
        }

        stage('Terraform Init and Plan for Azure') {
            when {
                expression { params.CLOUD_PROVIDER == 'Azure' }
            }
            steps {
                dir("${AZURE_CONFIG_PATH}") {
                    sh 'sudo terraform init'
                    sh 'sudo terraform plan -var-file="secret.tfvars" -out="azure-plan.tfplan"'
                }
            }
        }

        stage('Terraform Init and Plan for DigitalOcean') {
            when {
                expression { params.CLOUD_PROVIDER == 'DigitalOcean' }
            }
            steps {
                dir("${DO_CONFIG_PATH}") {
                    sh 'sudo terraform init'
                    sh 'sudo terraform plan -var-file="secret.tfvars" -out="do-plan.tfplan"'
                }
            }
        }

        stage('Terraform Apply for AWS') {
            when {
                expression { params.CLOUD_PROVIDER == 'AWS' }
            }
            steps {
                dir("${AWS_CONFIG_PATH}") {
                    sh 'sudo terraform apply "aws-plan.tfplan"'
                }
            }
        }

        stage('Terraform Apply for Azure') {
            when {
                expression { params.CLOUD_PROVIDER == 'Azure' }
            }
            steps {
                dir("${AZURE_CONFIG_PATH}") {
                    sh 'sudo terraform apply "azure-plan.tfplan"'
                }
            }
        }

        stage('Terraform Apply for DigitalOcean') {
            when {
                expression { params.CLOUD_PROVIDER == 'DigitalOcean' }
            }
            steps {
                dir("${DO_CONFIG_PATH}") {
                    sh 'sudo terraform apply "do-plan.tfplan"'
                }
            }
        }
    }
}